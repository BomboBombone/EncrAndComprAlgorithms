#include "CppUnitTest.h"

extern "C" {
#include "AES/aes.h"
}

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace AESTests {
	TEST_CLASS(AESEncryption) {
        unsigned int BLOCK_LEN = 16;

	public:
		TEST_METHOD(EncryptECB128) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f };
            unsigned char right[] = { 0x69, 0xc4, 0xe0, 0xd8, 0x6a, 0x7b, 0x04, 0x30,
                                     0xd8, 0xcd, 0xb7, 0x80, 0x70, 0xb4, 0xc5, 0x5a };
            AES* aes = AESFactory(AES_128);
            auto out = EncryptECB(aes, plain, BLOCK_LEN, key);
            Assert::IsTrue(!memcmp(right, out, BLOCK_LEN));
            free(out);
            free(aes);
		}
        TEST_METHOD(EncryptECB192) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17 };
            unsigned char right[] = { 0xdd, 0xa9, 0x7c, 0xa4, 0x86, 0x4c, 0xdf, 0xe0,
                                     0x6e, 0xaf, 0x70, 0xa0, 0xec, 0x0d, 0x71, 0x91 };
            AES* aes = AESFactory(AES_192);
            auto out = EncryptECB(aes, plain, BLOCK_LEN, key);
            Assert::IsTrue(!memcmp(right, out, BLOCK_LEN));
            free(out);
            free(aes);
        }
        TEST_METHOD(EncryptECB256) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };
            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
            unsigned char right[] = { 0x8e, 0xa2, 0xb7, 0xca, 0x51, 0x67, 0x45, 0xbf,
                                     0xea, 0xfc, 0x49, 0x90, 0x4b, 0x49, 0x60, 0x89 };
            AES* aes = AESFactory(AES_256);
            auto out = EncryptECB(aes, plain, BLOCK_LEN, key);
            Assert::IsTrue(!memcmp(right, out, BLOCK_LEN));
            free(out);
            free(aes);
        }
        TEST_METHOD(EncryptDecryptOneBlock) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff };

            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
            AES* aes = AESFactory(AES_128);
            auto out = EncryptECB(aes, plain, BLOCK_LEN, key);
            auto decrypted = DecryptECB(aes, out, BLOCK_LEN, key);
            Assert::IsTrue(!memcmp(plain, decrypted, BLOCK_LEN));
            free(out);
            free(aes);
        }
        TEST_METHOD(EncryptDecryptOneBlockMinusOne) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee };

            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
            AES* aes = AESFactory(AES_192);
            auto out = EncryptECB(aes, plain, BLOCK_LEN - 1, key);

            Assert::IsTrue(!out);
            free(out);
            free(aes);
        }
        TEST_METHOD(EncryptDecryptOneBlockPlusOne) {
            unsigned char plain[] = { 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77,
                         0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0xaa };

            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };
            AES* aes = AESFactory(AES_256);
            auto out = EncryptECB(aes, plain, BLOCK_LEN + 1, key);
            Assert::IsTrue(!out);
            free(out);
            free(aes);
        }
        TEST_METHOD(EncryptDecryptOneKB) {
            AES* aes = AESFactory(AES_256);
            unsigned int kbSize = 1024 * sizeof(unsigned char);
            unsigned char* plain = new unsigned char[kbSize];
            for (unsigned int i = 0; i < kbSize; i++) {
                plain[i] = i % 256;
            }

            unsigned char key[] = { 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                                   0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f,
                                   0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                                   0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f };

            unsigned char* out = EncryptECB(aes, plain, kbSize, key);
            unsigned char* innew = DecryptECB(aes, out, kbSize, key);
            Assert::IsTrue(!memcmp(innew, plain, kbSize));

            free(out);
            free(innew);
            free(aes);
        }
	};
}